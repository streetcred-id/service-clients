{
    "swagger": "2.0",
    "info": {
        "title": "Agency (Staging)",
        "version": "v1"
    },
    "host": "api.streetcred.id",
    "basePath": "/agency-staging/v1",
    "schemes": [
        "https"
    ],
    "securityDefinitions": {
        "accessToken": {
            "description": "Standard Authorization header using the Bearer scheme. Example \"Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "subscriptionKey": {
            "type": "apiKey",
            "name": "X-Streetcred-Subscription-Key",
            "in": "header"
        }
    },
    "security": [
        {
            "accessToken": []
        },
        {
            "subscriptionKey": []
        }
    ],
    "paths": {
        "/common/upload": {
            "post": {
                "description": "Upload an image and return a URL with the static remote location",
                "operationId": "UploadImage",
                "summary": "Upload image",
                "tags": [
                    "Common"
                ],
                "parameters": [
                    {
                        "name": "uploadedFiles",
                        "in": "formData",
                        "description": "The uploaded files.",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "filename",
                        "in": "formData",
                        "description": "The filename.",
                        "type": "string"
                    },
                    {
                        "name": "contentType",
                        "in": "formData",
                        "description": "(Optional) Type of the image content.",
                        "type": "string"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CommonUploadPost200ApplicationJsonResponse"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/common/networks": {
            "get": {
                "description": "Returns a list of available ledger networks. Some networks are available based on your subscription.",
                "operationId": "ListNetworks",
                "summary": "List available ledger networks",
                "tags": [
                    "Common"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/NetworkContractArray"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/connections": {
            "get": {
                "description": "Retrieve a list of all connections. Optionally, list only connections in a specified state.",
                "operationId": "ListConnections",
                "summary": "List all connections",
                "tags": [
                    "Connections"
                ],
                "parameters": [
                    {
                        "name": "state",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Invited",
                            "Negotiating",
                            "Connected"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ConnectionContractArray"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            },
            "post": {
                "description": "Initiate new connection by creating an invitation. The newly created connection record\r\nwill be in state 'Invited' until the other party has accepted the invitation.\r\n<br /><i>Please check the <a href=\"https://docs.streetcred.id\">documentation</a> on how to present the invitation data to mobile clients using QR code.</i>",
                "operationId": "CreateConnection",
                "summary": "Create new connection",
                "tags": [
                    "Connections"
                ],
                "parameters": [
                    {
                        "name": "connectionInvitationParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ConnectionInvitationParameters"
                        },
                        "description": "Connection invitation parameters"
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ConnectionContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/connections/{connectionId}": {
            "get": {
                "description": "Creates the connections.",
                "operationId": "GetConnection",
                "summary": "Creates the connections.",
                "tags": [
                    "Connections"
                ],
                "parameters": [
                    {
                        "name": "connectionId",
                        "in": "path",
                        "description": "The connection identifier.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ConnectionContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            },
            "delete": {
                "description": "Delete connection record.",
                "operationId": "DeleteConnection",
                "summary": "Delete connection record.",
                "tags": [
                    "Connections"
                ],
                "parameters": [
                    {
                        "name": "connectionId",
                        "in": "path",
                        "description": "Connection identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/credentials": {
            "get": {
                "description": "Lists the credentials.",
                "operationId": "ListCredentials",
                "summary": "Lists the credentials.",
                "tags": [
                    "Credentials"
                ],
                "parameters": [
                    {
                        "name": "connectionId",
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Offered",
                            "Requested",
                            "Issued",
                            "Rejected",
                            "Revoked"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CredentialContractArray"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            },
            "post": {
                "description": " Sends credential offer of the specified DefinitionId to the specified ConnectionId",
                "operationId": "CreateCredential",
                "summary": "Sends credential offer of the specified DefinitionId to the specified ConnectionId",
                "tags": [
                    "Credentials"
                ],
                "parameters": [
                    {
                        "name": "credentialOfferParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CredentialOfferParameters"
                        },
                        "description": "The definition and connection to which this offer will be sent."
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CredentialContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/credentials/{credentialId}": {
            "get": {
                "description": "Gets the credentials.",
                "operationId": "GetCredential",
                "summary": "Gets the credentials.",
                "tags": [
                    "Credentials"
                ],
                "parameters": [
                    {
                        "name": "credentialId",
                        "in": "path",
                        "description": "The credential identifier.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CredentialContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            },
            "put": {
                "description": "Issues the credential.",
                "operationId": "IssueCredential",
                "summary": "Issues the credential.",
                "tags": [
                    "Credentials"
                ],
                "parameters": [
                    {
                        "name": "credentialId",
                        "in": "path",
                        "description": "The credential identifier.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "values",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Values"
                        },
                        "description": "The values."
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "description": "Revoke credential that was issued previously. Process of revocation will update the revocation\r\nregistry locally and on the ledger. Issued credentials can still participate in proof workflows\r\nand be considered valid, but only if the verifying ignores the revocation trail.",
                "operationId": "RevokeCredential",
                "summary": "Revokes a credential.",
                "tags": [
                    "Credentials"
                ],
                "parameters": [
                    {
                        "name": "credentialId",
                        "in": "path",
                        "description": "Credential identifier.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/credentials/definitions": {
            "get": {
                "description": "Gets the definitions.",
                "operationId": "ListCredentialDefinitions",
                "summary": "Gets the definitions.",
                "tags": [
                    "Credentials"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CredentialDefinitionContractArray"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            },
            "post": {
                "description": "Create new credential definition for a given schema. If schema already exists on the ledger\r\nspecify the 'schema_id' - 'name', 'version' and 'attr_names' will be ignored.\r\nIf schema doesn't exist, you must specify 'name', 'version' and 'attr_names'\r\n- schema_id will be ignored and generated automatically.",
                "operationId": "CreateCredentialDefinition",
                "summary": "Create new credential definition.",
                "tags": [
                    "Credentials"
                ],
                "parameters": [
                    {
                        "name": "credentialDefinitionParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CredentialDefinitionParameters"
                        },
                        "description": "Definition."
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IdContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/credentials/definitions/{definitionId}": {
            "get": {
                "description": "Gets the definitions.",
                "operationId": "GetCredentialDefinition",
                "summary": "Gets the definitions.",
                "tags": [
                    "Credentials"
                ],
                "parameters": [
                    {
                        "name": "definitionId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CredentialDefinitionContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/credentials/schemas": {
            "get": {
                "description": "Gets the schemas.",
                "operationId": "ListSchemas",
                "summary": "Gets the schemas.",
                "tags": [
                    "Credentials"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SchemaRecordArray"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            },
            "post": {
                "description": "Register schema with the current agency tenant and write the schema\r\nto the ledger using the tenant as issuer.",
                "operationId": "CreateSchema",
                "summary": "Register new schema",
                "tags": [
                    "Credentials"
                ],
                "parameters": [
                    {
                        "name": "schemaParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SchemaParameters"
                        },
                        "description": "Schema details"
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CredentialsSchemasPost200ApplicationJsonResponse"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/messages": {
            "post": {
                "operationId": "SendMessage",
                "summary": "SendMessage",
                "tags": [
                    "Messaging"
                ],
                "parameters": [
                    {
                        "name": "basicMessageParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BasicMessageParameters"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/messages/connection/{connectionId}": {
            "get": {
                "operationId": "ListMessages",
                "summary": "ListMessages",
                "tags": [
                    "Messaging"
                ],
                "parameters": [
                    {
                        "name": "connectionId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BasicMessageRecordArray"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/messages/{messageId}": {
            "get": {
                "operationId": "GetMessage",
                "summary": "GetMessage",
                "tags": [
                    "Messaging"
                ],
                "parameters": [
                    {
                        "name": "messageId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BasicMessageContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/tenants": {
            "get": {
                "description": "Get a collection of available tenants for the current authorization context.",
                "operationId": "ListTenants",
                "summary": "List available tenants",
                "tags": [
                    "Tenants"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TenantContractArray"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            },
            "post": {
                "description": "Create new tenant and setup a unique agency endpoint. The agency will be set as an issuer",
                "operationId": "CreateTenant",
                "summary": "Create new tenant",
                "tags": [
                    "Tenants"
                ],
                "parameters": [
                    {
                        "name": "tenantParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TenantParameters"
                        },
                        "description": "Configuration options for creating new tenant."
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TenantContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/tenants/{tenantId}": {
            "delete": {
                "description": "Permanently remove a tenant, including their wallet, endpoint registrations and all data.\r\n            All definitions, connections and credentials issued will be deleted.\r\n            This action cannot be reverted.",
                "operationId": "DeleteTenant",
                "summary": "Delete a tenant.",
                "tags": [
                    "Tenants"
                ],
                "parameters": [
                    {
                        "name": "tenantId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "get": {
                "description": "Returns the agent configuration",
                "operationId": "GetTenant",
                "summary": "Returns the agent configuration",
                "tags": [
                    "Tenants"
                ],
                "parameters": [
                    {
                        "name": "tenantId",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TenantContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/tenants/status": {
            "get": {
                "operationId": "GetStatus",
                "summary": "GetStatus",
                "tags": [
                    "Tenants"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/StatusContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/tenants/accept_agreement": {
            "post": {
                "operationId": "AcceptLatestTransactionAuthorAgreement",
                "summary": "AcceptLatestTransactionAuthorAgreement",
                "tags": [
                    "Tenants"
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/verifications": {
            "get": {
                "description": "Lists the verifications for connection.",
                "operationId": "ListVerificationsForConnection",
                "summary": "Lists the verifications for connection.",
                "tags": [
                    "Verifications"
                ],
                "parameters": [
                    {
                        "name": "connectionId",
                        "in": "query",
                        "description": "The connection identifier.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VerificationContractArray"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            },
            "post": {
                "description": "Creates the specified create verification.",
                "operationId": "CreateVerification",
                "summary": "Creates the specified create verification.",
                "tags": [
                    "Verifications"
                ],
                "parameters": [
                    {
                        "name": "verificationParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/VerificationParameters"
                        },
                        "description": "The create verification."
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IdContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/verifications/{verificationId}": {
            "get": {
                "description": "Get the verification with the given identifier",
                "operationId": "GetVerification",
                "summary": "Get the verification with the given identifier",
                "tags": [
                    "Verifications"
                ],
                "parameters": [
                    {
                        "name": "verificationId",
                        "in": "path",
                        "description": "The verification identifier.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VerificationContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/verifications/{verificationId}/verify": {
            "get": {
                "description": "Execute verification on this record. This is an expensive action and is executed\r\nby veryfing the proof againt the ledger data.",
                "operationId": "VerifyVerification",
                "summary": "Execute verification on this record. This is an expensive action and is executed\r\nby veryfing the proof againt the ledger data.",
                "tags": [
                    "Verifications"
                ],
                "parameters": [
                    {
                        "name": "verificationId",
                        "in": "path",
                        "description": "Verification identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VerificationResult"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/verifications/definitions/{definitionId}": {
            "get": {
                "description": "Gets the specified proof request identifier.",
                "operationId": "GetVerificationDefinition",
                "summary": "Gets the specified proof request identifier.",
                "tags": [
                    "Verifications"
                ],
                "parameters": [
                    {
                        "name": "definitionId",
                        "in": "path",
                        "description": "The proof request identifier.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VerificationDefinitionContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/verifications/definitions": {
            "get": {
                "description": "Lists this instance.",
                "operationId": "ListVerificationDefinitions",
                "summary": "Lists this instance.",
                "tags": [
                    "Verifications"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VerificationDefinitionContractArray"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            },
            "post": {
                "description": "Creates the specified proof request.",
                "operationId": "CreateVerificationDefinition",
                "summary": "Creates the specified proof request.",
                "tags": [
                    "Verifications"
                ],
                "parameters": [
                    {
                        "name": "proofRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ProofRequest"
                        },
                        "description": "The proof request."
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IdContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/webhooks": {
            "get": {
                "description": "List all webhooks",
                "operationId": "ListWebhooks",
                "summary": "List all webhooks",
                "tags": [
                    "Webhooks"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/WebhookContractArray"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            },
            "post": {
                "description": "Create new webhook",
                "operationId": "CreateWebhook",
                "summary": "Create new webhook",
                "tags": [
                    "Webhooks"
                ],
                "parameters": [
                    {
                        "name": "webhookParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/WebhookParameters"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/WebhookContract"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/webhooks/{webhookId}": {
            "delete": {
                "description": "Remove registered webhook",
                "operationId": "RemoveWebhook",
                "summary": "Remove registered webhook",
                "tags": [
                    "Webhooks"
                ],
                "parameters": [
                    {
                        "name": "webhookId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/webhooks/{webhookId}/enable": {
            "put": {
                "description": "Enables a webhook",
                "operationId": "EnableWebhook",
                "summary": "Enables a webhook",
                "tags": [
                    "Webhooks"
                ],
                "parameters": [
                    {
                        "name": "webhookId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/webhooks/{webhookId}/disable": {
            "put": {
                "description": "Disables a webhook",
                "operationId": "DisableWebhook",
                "summary": "Disables a webhook",
                "tags": [
                    "Webhooks"
                ],
                "parameters": [
                    {
                        "name": "webhookId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        }
    },
    "definitions": {
        "NetworkContract": {
            "type": "object",
            "properties": {
                "network_id": {
                    "type": "string"
                },
                "network_name": {
                    "type": "string"
                },
                "pool_protocol_version": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ConnectionContract": {
            "type": "object",
            "properties": {
                "connectionId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "myDid": {
                    "type": "string"
                },
                "theirDid": {
                    "type": "string"
                },
                "myKey": {
                    "type": "string"
                },
                "theirKey": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "Invited",
                        "Negotiating",
                        "Connected"
                    ],
                    "type": "string"
                },
                "invitationUrl": {
                    "type": "string"
                },
                "endpoint": {
                    "$ref": "#/definitions/AgentEndpoint"
                },
                "createdAtUtc": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "AgentEndpoint": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "verkey": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "ConnectionInvitationParameters": {
            "description": "Connection invitation parameters",
            "type": "object",
            "properties": {
                "connection_id": {
                    "description": "Unique connection identifier. If not specified, a random one will be generated.",
                    "type": "string"
                },
                "multi_party": {
                    "description": "If set to 'true', the invitation can be used by multiple parties and will always have the status set to 'Invited'.\r\nWhen a party accepts this invitation, a new connection record with a unique identifier will be created.\r\n            \r\nDefault value is 'false'.",
                    "type": "boolean"
                }
            },
            "example": "{}"
        },
        "CredentialContract": {
            "type": "object",
            "properties": {
                "credentialId": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "Offered",
                        "Requested",
                        "Issued",
                        "Rejected",
                        "Revoked"
                    ],
                    "type": "string"
                },
                "connectionId": {
                    "type": "string"
                },
                "definitionId": {
                    "type": "string"
                },
                "schemaId": {
                    "type": "string"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "CredentialOfferParameters": {
            "description": "Send offer.",
            "type": "object",
            "properties": {
                "definitionId": {
                    "description": "Gets or sets the credential definition identifier.",
                    "type": "string"
                },
                "connectionId": {
                    "description": "Gets or sets their did.",
                    "type": "string"
                },
                "attributeValues": {
                    "description": "Credential attribute values.\r\nMust match all credential definition attribute names.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "CredentialDefinitionContract": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "attributes": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "supportsRevocation": {
                    "type": "boolean"
                },
                "maxCredentialCount": {
                    "format": "int32",
                    "type": "integer"
                },
                "schemaId": {
                    "type": "string"
                },
                "definitionId": {
                    "type": "string"
                }
            }
        },
        "CredentialDefinitionParameters": {
            "description": "Represents a request object to create new credential definition for an agency",
            "type": "object",
            "properties": {
                "schema_id": {
                    "description": "Schema identifier for this definition",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the schema.",
                    "type": "string"
                },
                "version": {
                    "description": "Schema version.",
                    "type": "string"
                },
                "attr_names": {
                    "description": "Schema attribute names.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "support_revocation": {
                    "description": "Support credential revocation",
                    "type": "boolean"
                },
                "max_count": {
                    "format": "int32",
                    "description": "Maximum credential count.",
                    "type": "integer"
                },
                "tag": {
                    "description": "Unique tag to differentiate definitions of the same schema",
                    "type": "string"
                }
            }
        },
        "IdContract": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "SchemaParameters": {
            "description": "Schema.",
            "type": "object",
            "properties": {
                "id": {
                    "description": "Gets or sets the identifier.",
                    "type": "string"
                },
                "name": {
                    "description": "Gets or sets the name.",
                    "type": "string"
                },
                "version": {
                    "description": "Gets or sets the version.",
                    "type": "string"
                },
                "attr_names": {
                    "description": "Gets or sets the attribute names.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "SchemaRecord": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "attributeNames": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "BasicMessageParameters": {
            "type": "object",
            "properties": {
                "connectionId": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "BasicMessageRecord": {
            "type": "object",
            "properties": {
                "sentTime": {
                    "format": "date-time",
                    "type": "string"
                },
                "direction": {
                    "enum": [
                        "Incoming",
                        "Outgoing"
                    ],
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "BasicMessageContract": {
            "type": "object",
            "properties": {
                "connectionId": {
                    "type": "string"
                },
                "timestamp": {
                    "format": "date-time",
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "direction": {
                    "enum": [
                        "Incoming",
                        "Outgoing"
                    ],
                    "type": "string"
                }
            }
        },
        "TenantContract": {
            "description": "Tenant info.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "Gets or sets the name.",
                    "type": "string"
                },
                "imageUrl": {
                    "description": "Gets or sets the image URI.",
                    "type": "string"
                },
                "network": {
                    "$ref": "#/definitions/NetworkContract",
                    "description": "Gets or sets the network."
                },
                "tenantId": {
                    "description": "Gets or sets the tenant identifier.",
                    "type": "string"
                },
                "extendedInformation": {
                    "$ref": "#/definitions/TenantExtendedInformationContract",
                    "description": "Extended tenant information"
                }
            }
        },
        "TenantExtendedInformationContract": {
            "description": "Extended tenant information",
            "type": "object",
            "properties": {
                "issuerDid": {
                    "description": "Issuer DID",
                    "type": "string"
                },
                "issuerKey": {
                    "description": "Issuer Public Key",
                    "type": "string"
                },
                "issuerKeyGenerationSeed": {
                    "description": "Isuser key generation seed used for deterministic key creation (32 characters)",
                    "type": "string"
                },
                "agentDid": {
                    "description": "Agent DID",
                    "type": "string"
                },
                "agentKey": {
                    "description": "Agent Public Key",
                    "type": "string"
                },
                "agentKeyGenerationSeed": {
                    "description": "Agent key generation seed used for deterministic key creation (32 characters)",
                    "type": "string"
                },
                "agentServiceEndpoint": {
                    "description": "Agent service endpoint URL",
                    "type": "string"
                },
                "transactionEndorsement": {
                    "description": "Transaction endorsement type",
                    "enum": [
                        "Shared",
                        "Dedicated",
                        "Delegated"
                    ],
                    "type": "string"
                }
            }
        },
        "TenantParameters": {
            "description": "Configuration options for creating new tenant",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "issuer_seed": {
                    "description": "(Optional) Issuer seed used for deterministic DID generation.\r\nIf omitted, a random DID/Key is generated",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the tenant.",
                    "type": "string"
                },
                "image_url": {
                    "description": "(Optional) Location of image URL used as profile for this tenant",
                    "type": "string"
                },
                "network_id": {
                    "description": "(Optional) Ledger network identifier. Default is Sovrin Staging (sovrin-staging)",
                    "type": "string"
                },
                "endorser_type": {
                    "description": "(Required) Set the endorer type for this organization",
                    "enum": [
                        "Shared",
                        "Dedicated",
                        "Delegated"
                    ],
                    "type": "string"
                }
            }
        },
        "StatusContract": {
            "type": "object",
            "properties": {
                "acceptanceText": {
                    "type": "string"
                },
                "acceptanceVersion": {
                    "type": "string"
                },
                "requireAcceptance": {
                    "type": "boolean"
                },
                "txn_endorsement": {
                    "description": "Configured transacation endorsement type",
                    "enum": [
                        "Shared",
                        "Dedicated",
                        "Delegated"
                    ],
                    "type": "string"
                },
                "ready": {
                    "description": "Indicates if this tenant is ready to write transactions\r\n on the configured ledger network",
                    "type": "boolean"
                },
                "status_messages": {
                    "description": "Status messages that indicate problems or actions that need to be taken.\r\nWill be populated if the field 'ready' is 'false'.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "VerificationContract": {
            "type": "object",
            "properties": {
                "connectionId": {
                    "type": "string"
                },
                "verificationId": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "Requested",
                        "Accepted",
                        "Rejected"
                    ],
                    "type": "string"
                },
                "createdAtUtc": {
                    "format": "date-time",
                    "type": "string"
                },
                "updatedAtUtc": {
                    "format": "date-time",
                    "type": "string"
                },
                "isValid": {
                    "type": "boolean"
                },
                "verifiedAtUtc": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "VerificationParameters": {
            "description": "Create verification",
            "type": "object",
            "properties": {
                "verificationDefinitionId": {
                    "description": "Verification definition identifier.",
                    "type": "string"
                },
                "connectionId": {
                    "description": "Connection identifier.",
                    "type": "string"
                }
            }
        },
        "VerificationResult": {
            "description": "Verification result",
            "type": "object",
            "properties": {
                "valid": {
                    "description": "True if verification passed, otherwise False",
                    "type": "boolean"
                }
            }
        },
        "VerificationDefinitionContract": {
            "description": "",
            "type": "object",
            "properties": {
                "id": {
                    "description": "Gets or sets the identifier.",
                    "type": "string"
                },
                "data": {
                    "$ref": "#/definitions/ProofRequest",
                    "description": "Gets or sets the proof request."
                }
            }
        },
        "ProofRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "nonce": {
                    "type": "string"
                },
                "requested_attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/ProofAttributeInfo"
                    }
                },
                "requested_predicates": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/ProofPredicateInfo"
                    }
                },
                "non_revoked": {
                    "$ref": "#/definitions/RevocationInterval"
                }
            },
            "example": "{\r\n  \"name\": \"proof-of-address-verification\",\r\n  \"version\": \"1.0\",\r\n  \"requested_attributes\": {\r\n    \"address-requirement\": {\r\n      \"name\": \"address\"\r\n    },\r\n    \"city-requirement\": {\r\n      \"name\": \"city\",\r\n      \"restrictions\": [\r\n        {\r\n          \"issuer_did\": \"<postOfficeDid>\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}"
        },
        "ProofAttributeInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "restrictions": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeFilter"
                    }
                },
                "non_revoked": {
                    "$ref": "#/definitions/RevocationInterval"
                }
            }
        },
        "ProofPredicateInfo": {
            "type": "object",
            "properties": {
                "p_type": {
                    "type": "string"
                },
                "p_value": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "restrictions": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeFilter"
                    }
                },
                "non_revoked": {
                    "$ref": "#/definitions/RevocationInterval"
                }
            }
        },
        "RevocationInterval": {
            "type": "object",
            "properties": {
                "from": {
                    "format": "int32",
                    "type": "integer"
                },
                "to": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "AttributeFilter": {
            "type": "object",
            "properties": {
                "schema_id": {
                    "type": "string"
                },
                "schema_issuer_did": {
                    "type": "string"
                },
                "schema_name": {
                    "type": "string"
                },
                "schema_version": {
                    "type": "string"
                },
                "issuer_did": {
                    "type": "string"
                },
                "cred_def_id": {
                    "type": "string"
                }
            }
        },
        "WebhookContract": {
            "description": "Webhook Contract.",
            "type": "object",
            "properties": {
                "url": {
                    "description": "Gets or sets the webhook endpoing url",
                    "type": "string"
                },
                "type": {
                    "description": "Gets or sets the type of webhook",
                    "enum": [
                        "Notification",
                        "DelegatedEndorser"
                    ],
                    "type": "string"
                },
                "enabled": {
                    "description": "Gets or set if this webhook is enabled",
                    "type": "boolean"
                },
                "id": {
                    "description": "The webhook identifier",
                    "type": "string"
                }
            }
        },
        "WebhookParameters": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "Notification",
                        "DelegatedEndorser"
                    ],
                    "type": "string"
                }
            }
        },
        "CommonUploadPost200ApplicationJsonResponse": {
            "type": "string"
        },
        "NetworkContractArray": {
            "uniqueItems": false,
            "type": "array",
            "items": {
                "$ref": "#/definitions/NetworkContract"
            }
        },
        "ConnectionContractArray": {
            "uniqueItems": false,
            "type": "array",
            "items": {
                "$ref": "#/definitions/ConnectionContract"
            }
        },
        "CredentialContractArray": {
            "uniqueItems": false,
            "type": "array",
            "items": {
                "$ref": "#/definitions/CredentialContract"
            }
        },
        "Values": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "CredentialDefinitionContractArray": {
            "uniqueItems": false,
            "type": "array",
            "items": {
                "$ref": "#/definitions/CredentialDefinitionContract"
            }
        },
        "SchemaRecordArray": {
            "uniqueItems": false,
            "type": "array",
            "items": {
                "$ref": "#/definitions/SchemaRecord"
            }
        },
        "CredentialsSchemasPost200ApplicationJsonResponse": {
            "type": "string"
        },
        "BasicMessageRecordArray": {
            "uniqueItems": false,
            "type": "array",
            "items": {
                "$ref": "#/definitions/BasicMessageRecord"
            }
        },
        "TenantContractArray": {
            "uniqueItems": false,
            "type": "array",
            "items": {
                "$ref": "#/definitions/TenantContract"
            }
        },
        "VerificationContractArray": {
            "uniqueItems": false,
            "type": "array",
            "items": {
                "$ref": "#/definitions/VerificationContract"
            }
        },
        "VerificationDefinitionContractArray": {
            "uniqueItems": false,
            "type": "array",
            "items": {
                "$ref": "#/definitions/VerificationDefinitionContract"
            }
        },
        "WebhookContractArray": {
            "uniqueItems": false,
            "type": "array",
            "items": {
                "$ref": "#/definitions/WebhookContract"
            }
        }
    },
    "tags": []
}